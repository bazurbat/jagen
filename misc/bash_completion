### Jagen Bash completion definitions ###

_jagen_complete__list_products() {
    local dir="${1:?}"

    ( cd "$dir/usr/product" &&
      for d in *; do
          echo $d
      done )
}

_jagen_complete_init_project() {
    local cur prev
    local this_cmd jagen_dir

    local opts='--help --list-products --share --force --flag'

    _get_comp_words_by_ref cur prev

    this_cmd="${COMP_WORDS[0]}"
    # chop off command name, if any
    jagen_dir="${this_cmd%/*}"

    case $prev in
        -a|--flag) ;; # expecting flag name, freeform, no completions for them for now
         *) COMPREPLY=($(compgen -W "$opts $(_jagen_complete__list_products "$jagen_dir")" -- "$cur")) ;;
    esac
}

_jagen_complete() {
    local word="$2" prev_word="$3"
    local cur prev
    local jagen_command jagen_subcommand

    local top_cmds='help get clean refresh build src show list'
    local src_cmds='dirty status clean update delete each'
    local src_each_opt='--type'
    local src_types='git hg repo'
    local help_opt='-h --help'
    local build_opt='-n --dry-run -p --progress -P --all-progress -f --force -a --all'
    local list_packages_opt='--depth -d --all -a'

    # environment is not sourced
    [ "$jagen_dir" ] || return 2

    _get_comp_words_by_ref -n : cur prev

    # Special case to avoid a level of nesting
    if [[ "$prev" == "jagen" ]]; then
        jagen_command="jagen"
    else
        jagen_command=${COMP_WORDS[1]}
    fi

    jagen_subcommand=${COMP_WORDS[2]}

    case $jagen_command in
        jagen)
            COMPREPLY=($(compgen -W "$help_opt $top_cmds" -- "$cur")) ;;
        get)
            if [[ "$prev" == "get" ]]; then
                COMPREPLY=($(compgen -W "$help_opt $(cat "$jagen_build_dir/__package_configs")" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "work_dir source_dir woo build_dir install_dir" -- "$cur"))
            fi
            ;;
        clean)
            if [[ "$prev" == "clean" ]]; then
                COMPREPLY=($(compgen -W "$help_opt $(cat "$jagen_build_dir/__package_configs")" -- "$cur"))
            else
                COMPREPLY=($(compgen -W "$(cat "$jagen_build_dir/__package_configs")" -- "$cur"))
            fi
            ;;
        refresh)
            COMPREPLY=($(compgen -W "$help_opt" -- "$cur")) ;;
        build)
            COMPREPLY=($(compgen -W "$help_opt $build_opt $(cat "$jagen_build_dir/__package_targets")" -- "$cur")) ;;
        src)
            if [[ "$prev" == "src" ]]; then
                COMPREPLY=($(compgen -W "$help_opt $src_cmds" -- "$cur"))
            else
                if [[ "$jagen_subcommand" == "each" ]]; then
                    if [[ "$prev" == "--type" ]]; then
                        COMPREPLY=($(compgen -W "$src_types" -- "$cur"))
                    else
                        COMPREPLY=($(compgen -W "$help_opt $src_each_opt" -- "$cur"))
                    fi
                else
                    COMPREPLY=($(compgen -W "$(cat "$jagen_build_dir/__package_names_scm")" -- "$cur"))
                fi
            fi
            ;;
        show)
            if [[ "$prev" == "show" ]]; then
                COMPREPLY=($(compgen -W "$help_opt $(cat "$jagen_build_dir/__package_targets")" -- "$cur"))
            fi ;;
        list)
            if [[ "$prev" == "list" ]]; then
                COMPREPLY=($(compgen -W "$help_opt packages" -- "$cur"))
            elif [[ "$jagen_subcommand" == "packages" ]]; then
                COMPREPLY=($(compgen -W "$help_opt $list_packages_opt" -- "$cur"))
            fi ;;
    esac

    __ltrim_colon_completions "$cur"
}

complete -o dirnames -F _jagen_complete_init_project init-project
complete -F _jagen_complete jagen

### End of Jagen Bash completion definitions ###
