#!/bin/sh

env_file="env.sh"
config_file="config.sh"

message() {
    echo init-root: $*
}

die() {
    message $*
    exit 1
}

show_help() {
    cat <<EOF
Usage: init-root <CONFIG> [OPTIONS...]
       init-root [-h]
       init-root [-l]

  Initializes current directory as jagen build root.

SYNOPSIS:

  The script will put an environment file '$env_file' and a configuration file
  '$config_file' in the current directory. The environment file should be
  sourced into the working shell before issuing any other jagen commands. The
  configuration file is sourced by a generator and a build system.

  Jagen will create and remove few directories inside the build root depending
  on the selected configuration and commands given, so it is not safe to store
  important data there. Also initializing jagen's own project directory as
  build root is not supported. It is recommended to use separate directory for
  every configuration and do not mix shell environments from different build
  roots.

OPTIONS:

  -a  add flag
  -h  show this help
  -l  list config templates
  -s  share sources between build roots
  -f  use force

  In the default configuration a location of software distributions, patches
  and toolchains is set relative to a base directory (\$jagen_dir/..) to
  facilitate sharing between different build roots. Source packages are checked
  out into the current build root (\$jagen_root/src). Use the '-s' option to
  set a location of source packages relative to the base directory too. Note
  that 'jagen clean' command does not touch the source packages location even
  if it is inside the build root.

  The command refuses to initialize non-empty directories by default. Use '-f'
  option to override the check.

  The generated environment binds the build root to the corresponding jagen
  project directory. If one or the other is moved it will become invalid. Use
  'init-root' again to reinitialize.

  The generated configuration can be adjusted manually but will be overwritten
  by the next 'init-root' invocation. Use '-a' option to set 'jagen_flags' from
  command line; it can be specified multiple times.

EXAMPLES:

    mkdir -p ~/work/root-ast100
    cd ~/work/root-ast100
    "<jagen_dir>/init-root" ast100 -a flag1 -a flag2
    . ./$env_file
    jagen build
    exit

  For subsequent invocations:

    cd ~/work/root-ast100
    . ./$env_file
    jagen rebuild target1 target2

EOF
}

list_configs() {
    cd "$jagen_dir/usr/product"
    for cfg_dir in *; do
        echo $cfg_dir
    done
}

write_env() {
    cat >"$env_file" <<EOF
#!/bin/sh

jagen_relative_dir="$jagen_dir"

jagen_dir=\$(cd "\$jagen_relative_dir"; pwd -P)
jagen_root=\$(pwd -P)
export jagen_dir jagen_root

. "\$jagen_dir/lib/main.sh"; sts=\$?
if [ \$sts != 0 ]; then
    echo "Error: failed to load jagen environment"
    return \$sts
fi

add_PATH "\$jagen_dir/bin"
add_PATH "\$jagen_root/bin"
EOF
}

write_config() {
    cat >"$config_file" <<EOF
# jagen_dir  - refers to the jagen project directory.
# jagen_root - refers to the current build root (where this file is located).

# Toplevel working directory.
# Note: setting relative path allows sourcing this environment both from
# outside and inside the chrooted container.
jagen_base_dir=\$(real_path "\$jagen_dir/..")

# Layers used by this build root.
jagen_layers="$jagen_layers"

# A directory where source packages will be checked out.
jagen_src_dir="$jagen_src_dir"

# Space separated list of optional features.
#   debug   - build debugging tools
#   ccache  - wrap compilation commands with ccache
#   offline - skip network operations
jagen_flags="$jagen_flags"

# Space separated list of package names excluded from cleaning and updating.
# Example: jagen_source_exclude="chicken karaoke-player"
jagen_source_exclude=""

# Global build type.
# Available values: release|debug|release_with_debug
jagen_build_profile="release"
EOF
}

parse_command_line() {
    local arg

    arg=$(getopt hlsfa: "$@")
    [ $? = 0 ] || die "failed to parse command line options"
    set -- $arg

    while [ $# -gt 0 ]; do
        case $1 in
            -h) show_help; exit 0 ;;
            -l) list_configs; exit 0 ;;
            -s) share_sources=1 ;;
            -f) use_force=1 ;;
            -a) if [ "$jagen_flags" ]; then
                    jagen_flags="$jagen_flags $2"
                else
                    jagen_flags="$2"
                fi
                shift ;;
            --) ;;
             *) jagen_product="$1"; break ;;
        esac
        shift
    done
}

jagen_dir=$(dirname $0)
jagen_root=''
jagen_product=''
jagen_flags=''

if [ $# = 0 ]; then
    show_help
    exit 0
fi

parse_command_line "$@"

if ! [ "$jagen_product" ]; then
    message "no product specified, assuming custom native build"
    jagen_product='native'
fi

if [ -z "$use_force" -a "$(printf *)" != '*' ]; then
    die "not initializing non-empty directory without force"
fi

jagen_product_dir="$jagen_dir/usr/product/$jagen_product"

if ! [ -d "$jagen_product_dir" ]; then
    die "no such product: $jagen_product"
fi

if [ "$share_sources" ]; then
    jagen_src_dir='$jagen_base_dir/src'
else
    jagen_src_dir='$jagen_root/src'
fi

. "$jagen_product_dir/init.sh" || exit

write_env || exit
write_config "$config_file" || exit
. ./env.sh || exit
jagen refresh
