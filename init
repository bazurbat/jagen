#!/bin/sh

set -eu

jagen_uri="https://github.com/bazurbat/jagen.git"
env_file="env.sh"
config_file="config.sh"

show_usage() {
    cat <<EOF
Usage: init-project [OPTIONS...] [--] [LAYERS...]

  Initializes current directory as a Jagen project.

SYNOPSIS:

  The script will put an environment file 'env.sh' and a configuration file
  'config.sh' in the current directory. The environment file should be sourced
  into the working shell before issuing any other Jagen commands. The config
  file contains project-specific settings and is sourced by the build system.

OPTIONS:

  -h, --help       show this usage information
  -a, --flag       add the flag to jagen_flags
  -i, --include    add the directory to jagen_include_path
  -f, --force      force to initialize non-empty directory

EOF
}

say() {
    echo "jagen-init: $*"
}

die() {
    say "$*" >&2
    exit 1
}

need_cmd() {
    if ! $(command -v "$1" >/dev/null); then
        die "could not find the '$1' command"
    fi
}

ensure_cloned() {
    if ! [ -d "$jagen_dir" ]; then
        need_cmd git
        git clone "$jagen_uri" "$jagen_dir"
    fi
}

parse_command_line() {
    local eoa=

    while [ $# -gt 0 ]; do
        case $1 in
            --) eoa=1 ;;
            -*) if [ "${eoa:-}" ]; then
                    jagen_layers="${jagen_layers-} $1"
                else
                    case $1 in
                        -a|--flag)
                            jagen_flags="${jagen_flags-} $2"; shift ;;
                        -i|--include)
                            jagen_include_path="${jagen_include_path-} $2"; shift ;;
                        -f|--force)
                            use_force=1 ;;
                        -h|--help)
                            show_usage; exit 0 ;;
                        *)
                            die "invalid option: $1"
                    esac
                fi ;;
             *) jagen_layers="${jagen_layers-} $1" ;;
        esac
        shift
    done

    jagen_flags=${jagen_flags+${jagen_flags# }}
    jagen_include_path=${jagen_include_path+${jagen_include_path# }}
    jagen_layers=${jagen_layers+${jagen_layers# }}
}

write_env() {
    cat >"$env_file" <<EOF
#!/bin/sh

jagen_relative_dir="$jagen_dir"

jagen_dir=\$(cd "\$jagen_relative_dir"; pwd -P)
jagen_project_dir=\$(pwd -P)
export jagen_dir jagen_project_dir

. "\$jagen_dir/env.sh"; sts=\$?
if [ \$sts != 0 ]; then
    echo "Error: failed to load jagen environment"
    return \$sts
fi

add_PATH "\$jagen_dir/bin"
add_PATH "\$jagen_project_dir/bin"
EOF
}

write_config() {
    cat >"$config_file" <<EOF
# jagen_dir         - refers to the jagen source directory
# jagen_project_dir - refers to the current project directory

# A list of directories containing layers used by this project.
# The list items should be newline (\\n) or tab (\\t) separated because normal
# spaces (including the indentation) are assumed to be the part of the pathname.
jagen_layers="${config_jagen_layers-}"

# A list of directories which will be used to resolve unqualified layer names.
jagen_include_path="${jagen_include_path-}"

# A directory for package sources.
jagen_src_dir="\$jagen_project_dir/src"

# A directory for downloaded distribution files.
jagen_dist_dir="\$jagen_project_dir/dist"

# Space separated list of optional features.
#   ccache  - wrap compilation commands with ccache
#   debug   - build debugging tools
#   devenv  - enable features pertinent to development environment
#   offline - skip network operations
jagen_flags="${jagen_flags-}"

# Space separated list of package names excluded from cleaning and updating.
jagen_source_exclude=""

# The default build profile: release|debug|release_with_debug
jagen_build_profile="release"
EOF
}

main() {
    parse_command_line "$@"
    if [ -z "${use_force-}" -a "$(ls -A)" ]; then
        die "not initializing non-empty directory without force"
    fi
    jagen_dir=$(dirname $0)
    if [ "$jagen_dir" = . ]; then
        jagen_dir=".jagen"
        ensure_cloned
    fi

    # construct newline-separated list of layers -- it looks prettier in
    # the config and allows having spaces in the paths
    config_jagen_layers="
"
    for layer in ${jagen_layers-}; do
        config_jagen_layers="${config_jagen_layers-}$layer
"
    done

    write_env
    write_config "$config_file"

    if ! [ -f "lib/rules.lua" ]; then
        mkdir -p lib
        cat >"lib/rules.lua" <<EOF
-- local rules for $(basename "$PWD")
EOF
fi

    . ./env.sh || exit
    jagen refresh
}

main "$@"
