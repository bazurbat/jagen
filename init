#!/bin/sh

set -eu

jagen_url="https://github.com/bazurbat/jagen.git"
env_file="env.sh"
config_file="config.sh"
runner_script="jagen"

show_usage() {
    cat <<EOF
Usage: init [OPTIONS...] [--] [LAYERS...]

  Initializes current directory as a Jagen project.

SYNOPSIS:

  The script should be run from the directory which you want to initialize as
  the project reaching out by a relative path to the checked out Jagen sources
  or piped to shell. It creates 'config.sh', 'env.sh' and 'jagen' files in the
  current directory.

  The generated 'config.sh' contains parameters from the 'init' command line
  (layers, flags) and other global settings. Edit it manually to adjust the
  parameters or global environment. It is sourced every time the build system
  runs. 
  
  For interactive work source the generated 'env.sh' to initialize current
  Shell environment for this project from now on. This will put 'jagen' command
  in PATH and allow Bash to autocomplete its commands and the project's
  targets. Note that mixing the environments from different projects will
  likely produce unexpected results.

  Use the 'jagen' script inside the project directory to run Jagen commands for
  this project from outside without modifying the environment. This could be
  useful to activate the build from IDEs and such.

OPTIONS:

  -h, --help   show this usage information
  -a, --flag   add the flag to jagen_flags
  -f, --force  force to initialize non-empty directory
  -L           add the directory to jagen_layer_path

  The following flags are reserved by the core:
  
    ccache  -- activate the usage of 'ccache' for all toolchain commands
    offline -- causes all operations requiring the network to fail

  Reinitializing an existing project is possible with '--force' but note that
  it will regenerate the 'config.sh'. The previous is saved as 'config.sh.bak'.
  Copy your old settings from it manually if necessary.

EOF
}

say() {
    echo "jagen-init: $*"
}

die() {
    say "$*" >&2
    exit 1
}

need_cmd() {
    if ! $(command -v "$1" >/dev/null); then
        die "could not find the '$1' command"
    fi
}

git_clone() {
    local url="${1:?}" dir="${2:?}"
    if ! [ -d "$dir" ]; then
        need_cmd git
        git clone --depth 1 -- "$url" "$dir"
    fi
}

path_is_url() {
    [ "$1" != "${1#?*://?*/?*}"   ] && return # 0 if match: prot://host/dir
    [ "$1" != "${1#*/?}"          ] || return # 1 if not contains / or ends with /
    [ "$1" != "${1#git@?*:?*/?*}" ] && return # 0 if matches like git@github.com:name/dir
    [ "$1" != "${1#?*:?*/?*}"     ] && return # 0 if matches like github.com:name/dir
    return 1
}

parse_command_line() {
    local eoa=

    while [ $# -gt 0 ]; do
        case $1 in
            --) eoa=1 ;;
            -*) if [ "${eoa:-}" ]; then
                    init_jagen_layers="${init_jagen_layers-} $1"
                else
                    case $1 in
                        -h|--help)
                            show_usage; exit 0 ;;
                        -a|--flag)
                            jagen_flags="${jagen_flags-} $2"; shift ;;
                        -f|--force)
                            use_force=1 ;;
                        -L)
                            jagen_layer_path="${jagen_layer_path-} $2"; shift ;;
                        *)
                            die "invalid option: $1"
                    esac
                fi ;;
             *) init_jagen_layers="${init_jagen_layers-} $1" ;;
        esac
        shift
    done

    jagen_flags=${jagen_flags+${jagen_flags# }}
    jagen_layer_path=${jagen_layer_path+${jagen_layer_path# }}
    init_jagen_layers=${init_jagen_layers+${init_jagen_layers# }}
}

write_env() {
    cat >"$env_file" <<EOF
#!/bin/sh

jagen_dir=$jagen_dir
jagen_root_dir=$(pwd -P)
export jagen_dir jagen_root_dir

. "\$jagen_dir/env.sh"; sts=\$?
if [ \$sts != 0 ]; then
    echo "Error: failed to load jagen environment"
    return \$sts
fi

add_PATH "\$jagen_dir/bin"
add_PATH "\$jagen_root_dir/bin"
EOF
}

write_runner() {
    cat >"$runner_script" <<'EOF'
#!/bin/sh
jagen_root_dir=$(cd "$(dirname "$0")" && pwd -P)
. "$jagen_root_dir/env.sh"; sts=$?
[ $sts = 0 ] || exit $sts
_jagen "$@"
EOF
    chmod +x "$runner_script"
}

write_config() {
    cat >"$config_file" <<EOF
# jagen_dir         - refers to the jagen source directory
# jagen_root_dir - refers to the current project directory

EOF
    if [ "${jagen_layer_path-}" ]; then
        cat >>"$config_file" <<EOF
# A list of directories to search for unqualified layers.
jagen_layer_path="${jagen_layer_path-}"

EOF
    fi
    cat >>"$config_file" <<EOF
# A list of directories containing layers used by this project.
# The list items should be newline (\\n) or tab (\\t) separated because normal
# spaces (including the indentation) are assumed to be the part of the pathname.
jagen_layers="${jagen_layers-}"

# Space separated list of optional features.
#   ccache  - wrap compilation commands with ccache
#   offline - skip network operations
jagen_flags="${jagen_flags-}"

# A directory for downloaded distribution files.
jagen_dist_dir="${jagen_dist_dir-\$jagen_root_dir/dist}"

# A directory for package sources.
jagen_src_dir="${jagen_src_dir-\$jagen_root_dir/src}"

# Space separated list of package names excluded from cleaning and updating.
jagen_source_exclude="${jagen_source_exclude-}"

# The default build profile: release|debug|release_with_debug
jagen_build_profile="${jagen_build_profile-release}"
EOF
}

main() {
    local layer path

    parse_command_line "$@"
    if [ -z "${use_force-}" -a "$(ls -A)" ]; then
        die "not initializing non-empty directory without force"
    fi
    jagen_dir=$(dirname $0)
    if [ "$jagen_dir" = . ]; then
        jagen_dir=".jagen"
        git_clone "$jagen_url" "$jagen_dir"
    fi
    jagen_dir=$(cd "$jagen_dir" 2>&- && pwd -P)

    for layer in ${init_jagen_layers-}; do
        if path_is_url "$layer"; then
            path=${layer##*/} path=${path%.git} path="./layer/$path"
            git_clone "$layer" "$path"
            layer="$path"
        fi
        jagen_layers="${jagen_layers-}$layer
"
    done
    if [ "${jagen_layers-}" ]; then
        jagen_layers="
$jagen_layers"
    fi

    write_env
    write_runner
    if [ -f "$config_file" ]; then
        say "backing up the existing config as ${config_file}.bak"
        cp -f "$config_file" "${config_file}.bak"
    fi
    write_config "$config_file"

    . ./env.sh || exit
    jagen refresh
}

main "$@"
