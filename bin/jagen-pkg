#!/bin/sh

if [ "$1" = '-q' ]; then
    shift
    pkg_query="${1:?}"
    pkg_name="${2:?}"
    pkg_config="$3"
    # do not print anything else to allow usage in scripts
    jagen_debug=
else
    pkg_name="${1:?}"
    pkg_stage="${2:?}"
    pkg_config="$3"
    shift 3
    pkg_args="$@"
fi

. "${jagen_dir:?}/src/pkg.sh" || die

_pkg_stamp_name="${pkg_name}__${pkg_stage}${pkg_config:+__${pkg_config}}"
_pkg_stamp_file="${jagen_build_dir:?}/${_pkg_stamp_name}"
_pkg_log_file="${jagen_log_dir:?}/${_pkg_stamp_name}.log"

pkg_build_generator="$jagen_cmake_generator"

export pkg_work_dir="${jagen_build_dir:?}/$pkg_name"
export pkg_build_dir="$pkg_work_dir${pkg_config:+/$pkg_config}"

if [ -z "$pkg_query" ]; then
    : >"$_pkg_log_file"
fi

cd "$jagen_build_dir" || die

include "$jagen_include_dir/$pkg_name" || die

if ! [ "$pkg_stage" = "unpack" -o "$pkg_stage" = "patch" ]; then
    : ${pkg_env:=$pkg_config}
    for e in $pkg_env; do
        use_env "$e" || true
    done; unset e
    include "$jagen_include_dir/${pkg_name}__${pkg_config}" || die
fi

export pkg_install_dir="$pkg_install_root$pkg_install_prefix"

# Deferred expansion of pkg_* variables from the included scripts.
# These elaborate manipulations with IFS and quoting are needed to preserve
# whitespace in the variable values because we use newlines to separate items
# in lists.
expand_vars() {
    local IFS name value depth
    for name in $(set | awk -F= '/^pkg_.*=/ { print $1 }'); do
        depth=10
        while [ $depth -gt 0 ]; do
            value=$(IFS= eval echo \$${name})
            IFS= eval ${name}='$(eval echo \"$value\")'
            [ "$value" = "${value#*$}" ] && break
            depth=$((depth-1))
        done
        [ $depth = 0 ] && die "maximum recursion depth exceeded when trying to expand $name: $value"
    done
}
expand_vars

_pkg_file=$(find_in_path "pkg/${pkg_name}.sh")
if [ "$_pkg_file" ]; then
    include "$_pkg_file"
fi; unset _pkg_file

if [ "$pkg_query" ]; then
    case $pkg_query in
        work_dir)
            printf '%s\n' "$pkg_work_dir" ;;
        source_dir)
            printf '%s\n' "$pkg_source_dir" ;;
        build_dir)
            printf '%s\n' "$pkg_build_dir" ;;
        install_dir)
            printf '%s\n' "$pkg_install_dir" ;;
    esac
    exit 0
fi

case $pkg_stage in
    unpack)
        cd "$jagen_build_dir"
        ;;
    patch)
        if [ "$pkg_source_dir" ] && [ -d "$pkg_source_dir" ]; then
            pkg_run cd "$pkg_source_dir"
        fi
        ;;
    *)
        if [ "$pkg_build_dir" ]; then
            pkg_run mkdir -p "$pkg_build_dir"
            pkg_run cd "$pkg_build_dir"
        fi ;;
esac

run_stage() {
    local stage pkg
    stage=$(echo "$1" | sed 's/-/_/')
    pkg="$pkg_name${pkg_config:+ ($pkg_config)}"

    if is_function "$stage"; then
        debug "$pkg: $stage"
        eval "$stage" $pkg_args >>"$_pkg_log_file" 2>&1 ||
            die "failed to run $pkg_stage stage of package $pkg"
    else
        return 2
    fi
}

run_stage "jagen_pkg_${pkg_stage}_${pkg_config}" ||
    run_stage "jagen_pkg_${pkg_stage}"

touch "$_pkg_stamp_file"
