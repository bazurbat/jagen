#!/bin/sh

if [ "$1" = '-q' ]; then
    shift
    pkg_query="${1:?}"
    pkg_name="${2:?}"
    pkg_config="$3"
    # do not print anything else to allow usage in scripts
    jagen_debug=
else
    pkg_name="${1:?}"
    pkg_stage="${2:?}"
    pkg_config="$3"
    shift 3
    pkg_args="$@"
fi

. "${jagen_dir:?}/src/pkg.sh" || die

pkg__get_export_file() {
    printf '%s' "${jagen_include_dir:?}/${1:?}__export.sh"
}

_pkg_stamp_name="${pkg_name}__${pkg_stage}${pkg_config:+__${pkg_config}}"
_pkg_stamp_file="${jagen_build_dir:?}/${_pkg_stamp_name}"
_pkg_log_file="${jagen_log_dir:?}/${_pkg_stamp_name}.log"

pkg_build_generator="$jagen_cmake_generator"

export pkg_work_dir="${jagen_build_dir:?}/$pkg_name"
export pkg_build_dir="$pkg_work_dir${pkg_config:+/$pkg_config}"

if [ -z "$pkg_query" ]; then
    : >"$_pkg_log_file"
fi

cd "$jagen_build_dir" || die

include "$jagen_include_dir/$pkg_name" || die
if [ "$pkg_config" ]; then
    include "$jagen_include_dir/${pkg_name}__${pkg_config}" || die
fi

if [ "$pkg_build_toolchain" ]; then
    pkg__import_file=$(pkg__get_export_file "$pkg_build_toolchain")
    prefix=$(to_name "$pkg_build_toolchain")
    include "$pkg__import_file"
    for var in $(set | sed -rn "s/^(${prefix}_[[:alnum:]_]+)=.*/\1/p"); do
        name=${var#${prefix}_}
        eval ": \${pkg_${name}:=\"\$$var\"}"
    done; unset prefix var name
fi

if [ "$pkg_config" ]; then
    use_env "$pkg_config" || true
fi

if [ "${pkg_build_toolchain-}" ]; then
    if [ "${pkg_build_set_toolchain-}" ]; then
        use_env set_toolchain
    fi
fi

export pkg_install_dir="$pkg_install_root$pkg_install_prefix"

# Expand still unresolved pkg_* variables. This step is performed last with all
# values from package environments and include scripts in scope which allows
# them to refer to each other.
for name in $(set | awk -F= '/^pkg_.*=/ { print $1 }'); do
    eval $name='$(jagen__expand "$(IFS= eval echo \$$name)")'
done; unset name

_pkg_file=$(find_in_path "pkg/${pkg_name}.sh")
if [ "$_pkg_file" ]; then
    include "$_pkg_file"
fi; unset _pkg_file

if [ "$pkg_query" ]; then
    case $pkg_query in
        work_dir)
            printf '%s\n' "$pkg_work_dir" ;;
        source_dir)
            printf '%s\n' "$pkg_source_dir" ;;
        build_dir)
            printf '%s\n' "$pkg_build_dir" ;;
        install_dir)
            printf '%s\n' "$pkg_install_dir" ;;
    esac
    exit 0
fi

case $pkg_stage in
    unpack)
        cd "$jagen_build_dir"
        ;;
    patch)
        if [ "$pkg_source_dir" ] && [ -d "$pkg_source_dir" ]; then
            pkg_run cd "$pkg_source_dir"
        fi
        ;;
    *)
        if [ "$pkg_build_dir" ]; then
            pkg_run mkdir -p "$pkg_build_dir"
            pkg_run cd "$pkg_build_dir"
        fi
        in_flags ccache && use_env ccache
        ;;
esac

run_stage() {
    local stage pkg
    stage=$(echo "$1" | sed 's/-/_/')
    pkg="$pkg_name${pkg_config:+ ($pkg_config)}"

    if is_function "$stage"; then
        debug "$pkg: $stage"
        eval "$stage" $pkg_args >>"$_pkg_log_file" 2>&1 ||
            die "failed to run $pkg_stage stage of package $pkg"
    else
        return 2
    fi
}

run_stage "jagen_pkg_${pkg_stage}_${pkg_config}" ||
    run_stage "jagen_pkg_${pkg_stage}"

if [ "${pkg_has_export-}" ] && [ "$pkg_stage" = 'install' ]; then
    pkg__export_file=$(pkg__get_export_file "$pkg_name")
    >"$pkg__export_file"
    for var in $(set | sed -rn 's/^(pkg_export_[[:alnum:]_]*)=.*/\1/p'); do
        name=${var#pkg_export_}
        echo "$(to_name "$pkg_name")_${name}='$(eval echo \"\$$var\")'" >> $pkg__export_file
    done; unset var name
fi

touch "$_pkg_stamp_file"
