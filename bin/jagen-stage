#!/bin/sh
#shellcheck disable=2154,2155

pkg_name="${1:?}"
pkg_stage="${2:?}"
pkg_config="$3"
shift 3
pkg_args="$@"

. "${jagen_dir:?}/src/stages.sh" || exit

pkg__target="${pkg_name}:${pkg_stage}${pkg_config:+:${pkg_config}}"
pkg__stamp_file="${jagen_build_dir:?}/${pkg__target}"
pkg__log_file="${jagen_log_dir:?}/${pkg__target}.log"
pkg__stdout=3
pkg__stderr=4

# the source fd can only be a literal number
exec 3>&1 4>&2
: >"$pkg__log_file"

pkg__on_exit() {
    # dash calls an exit handler before an int handler with the status 130 when
    # errexit is active, just ignore this
    [ $1 = EXIT -a $2 = 130 ] && return
    # do not allow a recursive call which can happen in dash and ash if the
    # handler is too slow and a user is too quick pressing CTRL-C multiple times
    trap '' INT
    # make sure we are in a known state, do not interrupt the handler on error
    set +e

    local err=$2

    pkg__download_cleanup

    # the int handler is called with the status 130 except in dash with errexit
    # where it is called with 0 after the first command of an exit handler
    if [ $err != 0 -a $err != 130 ]; then
        printf "${pkg__target}\t${pkg__log_file}\n" >>"$jagen__cmd_failed_targets_file"
    fi

    if [ -s "$pkg__log_file" ]; then
        printf "\\034" >>"$pkg__log_file"
    fi

    if [ $1 = INT ]; then
       # exit indicating an interrupt to a parent shell, Bash in particular
       # requires this to distiguish an error exit from a user interrupt
       trap INT && kill -INT $$
    fi

    # when the shell is in fact dash and the INT trap was activated due to an
    # errexit condition, we will still reach here despite the kill above
}

# we need to trap both INT and EXIT to have an opportunity to workaround the
# discrepancies of signal handling between different shells
trap 'pkg__on_exit INT $?' INT
trap 'pkg__on_exit EXIT $?' EXIT

if [ "$jagen__cmd_verbose" ]
then
    pkg__pipe=$(mktemp -u /tmp/jagen.XXXXXXXX) || exit
    mkfifo "$pkg__pipe" || exit
    # tee will exit by itself when this process will close all fds associated
    # with the pipe, this will happen on exit automatically
    tee <"$pkg__pipe" -a "$pkg__log_file" || exit &
    exec >"$pkg__pipe" 2>&1 || exit
    # unlink a filesystem object, the pipe will exist as long as open fds
    rm -f "$pkg__pipe" || exit
elif [ "$jagen__cmd_quiet" ] || ! [ "$jagen__has_console" ] ||
    ! in_list "$pkg__target" $jagen_cmd_targets
then
    exec >>"$pkg__log_file" 2>&1 || exit
fi

cd "$jagen_build_dir" || exit

pkg_work_dir="${jagen_build_dir:?}/$pkg_name"

# override global env and set initial values for pkg env
if [ "$pkg_config" ]; then
    import "config/$pkg_config"
fi

# include scripts
include "$jagen_include_dir/$(pkg__fname "$pkg_name")" || exit
if [ "$pkg_config" ]; then
    include "$jagen_include_dir/$(pkg__fname "$pkg_name" "$pkg_config")" || exit
    # assign "pkg__<config>__export_*" to "pkg_export_*"
    prefix="pkg__${pkg_config}__export"
    for key in $(set | sed -E -n "s/^${prefix}_([[:alnum:]_]+)=.*/\1/p"); do
        eval "pkg_export_${key}=\$${prefix}_${key}" || exit
    done; unset prefix key
    # append config-specific uses
    # This might cause a duplicated include of export files but this is OK
    # because they are fully expanded and should not have any side effects.
    pkg_uses="$pkg_uses $(eval echo \${pkg__${pkg_config}__uses})"
fi

if [ "$pkg_stage" != clean ]; then
    # include uses
    for spec in $pkg_uses; do
        name=${spec%%:*} config=${spec##*:}
        # no substitution means there was no :config suffix
        [ "$config" = "$name" ] && config=$pkg_config
        include "$jagen_include_dir/$(pkg__export_fname "$name")" || exit
        if [ "$config" ]; then
            include "$jagen_include_dir/$(pkg__export_fname "$name" "$config")" || exit
        fi
        # assign "<name>_env_*" to "pkg_env_*" if unset
        name=$(jagen_name_to_id "${spec%:*}")
        for key in $(set | sed -E -n "s/^${name}_env_([[:alnum:]_]+)=.*/\1/p"); do
            eval ": \${pkg_env_${key}=\$${name}_env_${key}}" || exit
        done; unset name key
    done; unset spec name config
fi

pkg__assign_alias() {
    local IFS='='; set -- $1; unset IFS
    local key alias_to="$1" alias_from="$2"
    for key in $(set | sed -E -n "s/^${alias_from}_([[:alnum:]_]+)=.*/\1/p"); do
        eval "${alias_to}_${key}=\$${alias_from}_${key}" || return
    done
}

pkg_use_alias="$pkg_use_alias $(eval echo "\$pkg__${pkg_config}__use_alias")"
for use_alias in $pkg_use_alias; do
    pkg__assign_alias "$use_alias" || exit
done; unset use_alias

: "${pkg_build_arch=$toolchain_arch}"
: "${pkg_build_cpu=$toolchain_cpu}"
: "${pkg_build_system=$toolchain_system}"

if [ "${pkg_build_system}" ]; then
    pkg_toolchain_prefix=${pkg_build_system}-
fi

# useful pkg-specific variables for scripts
pkg_install_dir="${pkg_install_root}${pkg_install_prefix}"

# defaults
: ${pkg_build_cmake_executable=${jagen_cmake_executable:-cmake}}
: ${pkg_build_generator=${jagen_cmake_generator:-Ninja}}
: ${pkg_build_cmake_module_path=$jagen_cmake_module_path}

# set pkg_env_* in the environment collecting names for delayed expansions
for name in $(set | sed -E -n 's/^pkg_env_([[:alnum:]_]+)=.*/\1/p'); do
    # an existing non-empty global variable
    if [ "$(eval echo \$$name)" ]; then
        pkg__env_globals="${pkg__env_globals}${jagen_FS}${name}"
    else
        pkg__env_locals="${pkg__env_locals} -e ${name}"
        eval "export $name=\"\$pkg_env_$name\"" || exit
    fi
done; unset name

# expand single-quoted pkg_* and the collected local names
eval "$(jagen__expand "$(set | grep -E -e '^pkg_[[:alpha:]][[:alnum:]_]+=' $pkg__env_locals)")"

# assign the collected global names from the fully-expanded local env
for name in $pkg__env_globals; do
    eval "$name=\$pkg_env_$name"
done; unset name

unset pkg__env_locals pkg__env_globals

if [ "$pkg_build_toolchain" ]; then
    use_env toolchain
fi

# config-specific adjustment of pkg env
if [ "$pkg_config" ]; then
    use_env "$pkg_config"
fi

if [ -z "$jagen_recursive" ]; then
    if [ "$pkg_config" ]; then
        if [ "$pkg_stage" = 'install' ] && [ "$pkg_install_spawn_name" ]; then
            pkg__spawn "$pkg_install_spawn_name"
            exit
        elif [ "$pkg_build_spawn_name" ]; then
            pkg__spawn "$pkg_build_spawn_name"
            exit
        fi
    elif [ "$pkg_spawn_name" ]; then
        pkg__spawn "$pkg_spawn_name"
        exit
    fi
fi

pkg__file=$(find_in_path "pkg/${pkg_name}.sh")
if [ -z "$pkg__file" ]; then
    pkg__file=$(find_in_path "pkg/${pkg_name%~*}.sh")
fi
if [ "$pkg__file" ]; then
    include "$pkg__file" || exit
fi; unset pkg__file

case $pkg_stage in
    clean|unpack|update)
        cd "$jagen_build_dir"
        ;;
    patch|generate)
        if [ "$pkg_source_dir" ] && [ -d "$pkg_source_dir" ]; then
            pkg_run cd "$pkg_source_dir"
        fi
        ;;
    *)
        if [ "$pkg_build_dir" ]; then
            pkg_run mkdir -p "$pkg_build_dir"
            pkg_run cd "$pkg_build_dir"
        fi
        in_flags ccache && use_env ccache
        ;;
esac

pkg__try_stages="jagen_pkg_${pkg_stage} jagen_stage_${pkg_stage}"
if [ "$pkg_config" ]; then
    pkg__try_stages="\
jagen_pkg_${pkg_stage}_${pkg_config} \
jagen_stage_${pkg_stage}_${pkg_config} \
$pkg__try_stages"
fi
pkg__try_stages=$(echo "$pkg__try_stages" | sed 's/-/_/g')

for pkg__current_stage in $pkg__try_stages; do
    if is_function "$pkg__current_stage"; then
        # this command should remain unchecked for errexit to be able to
        # interrupt the function as expected
        eval "$pkg__current_stage" $pkg_args; pkg__err=$?
        # an error status always causes an exit regardless of errexit
        [ $pkg__err = 0 ] || exit $pkg__err
        break
    fi
done

touch "$pkg__stamp_file"
