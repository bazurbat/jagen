#!/bin/sh
# shellcheck disable=1090,2034,2086,2154,2155

pkg_name="${1:?}"
pkg_stage="${2:?}"
pkg_config="$3"
shift 3
pkg_args="$@"

. "${jagen_dir:?}/src/stages.sh" || exit

pkg__target="${pkg_name}:${pkg_stage}${pkg_config:+:${pkg_config}}"
pkg__stamp_file="${jagen_build_dir:?}/${pkg__target}"
pkg__log_file="${jagen_log_dir:?}/${pkg__target}.log"
pkg__stdout=3
pkg__stderr=4

# the source fd can only be a literal number
exec 3>&1 4>&2
: >"$pkg__log_file"

pkg__on_exit() {
    # dash calls an exit handler before an int handler with the status 130 when
    # errexit is active, just ignore this
    [ $1 = EXIT -a $2 = 130 ] && return
    # do not allow a recursive call which can happen in dash and ash if the
    # handler is too slow and a user is too quick pressing CTRL-C multiple times
    trap '' INT
    # make sure we are in a known state, do not interrupt the handler on error
    set +e

    local err=$2

    pkg__download_cleanup

    # the int handler is called with the status 130 except in dash with errexit
    # where it is called with 0 after the first command of an exit handler
    if [ $err != 0 -a $err != 130 ]; then
        printf "${pkg__target}\t${pkg__log_file}\n" >>"$jagen__cmd_failed_targets_file"
    fi

    if [ -s "$pkg__log_file" ]; then
        printf "\\034" >>"$pkg__log_file"
    fi

    if [ $1 = INT ]; then
       # exit indicating an interrupt to a parent shell, Bash in particular
       # requires this to distiguish an error exit from a user interrupt
       trap INT && kill -INT $$
    fi

    # when the shell is in fact dash and the INT trap was activated due to an
    # errexit condition, we will still reach here despite the kill above
}

# we need to trap both INT and EXIT to have an opportunity to workaround the
# discrepancies of signal handling between different shells
trap 'pkg__on_exit INT $?' INT
trap 'pkg__on_exit EXIT $?' EXIT

if [ "$jagen__cmd_verbose" ]
then
    pkg__pipe=$(mktemp -u /tmp/jagen.XXXXXXXX) || exit
    mkfifo "$pkg__pipe" || exit
    # tee will exit by itself when this process will close all fds associated
    # with the pipe, this will happen on exit automatically
    tee <"$pkg__pipe" -a "$pkg__log_file" || exit &
    exec >"$pkg__pipe" 2>&1 || exit
    # unlink a filesystem object, the pipe will exist as long as open fds
    rm -f "$pkg__pipe" || exit
elif [ "$jagen__cmd_quiet" ] || ! [ "$jagen__has_console" ] ||
    ! in_list "$pkg__target" $jagen_cmd_targets
then
    exec >>"$pkg__log_file" 2>&1 || exit
fi

cd "$jagen_build_dir" || exit

# include scripts
include "$jagen_include_dir/$(pkg__fname "$pkg_name")" || exit

if [ "$pkg_build_toolchain" ]; then
    use_env toolchain
fi

# config-specific adjustment of pkg env
if [ "$pkg_config" ]; then
    use_env "$pkg_config"
fi

if [ -f "$pkg_backing_script" ]; then
    include "$pkg_backing_script"
fi

case $pkg_stage in
    clean|unpack|update)
        cd "$jagen_build_dir"
        ;;
    patch|generate)
        if [ "$pkg_source_dir" ] && [ -d "$pkg_source_dir" ]; then
            pkg_run cd "$pkg_source_dir"
        fi
        ;;
    *)
        if [ "$pkg_build_dir" ]; then
            pkg_run mkdir -p "$pkg_build_dir"
            pkg_run cd "$pkg_build_dir"
        fi
        in_flags ccache && use_env ccache
        ;;
esac

pkg__try_stages="jagen_pkg_${pkg_stage} jagen_stage_${pkg_stage}"
if [ "$pkg_config" ]; then
    pkg__try_stages="\
jagen_pkg_${pkg_stage}_${pkg_config} \
jagen_stage_${pkg_stage}_${pkg_config} \
$pkg__try_stages"
fi
pkg__try_stages=$(echo "$pkg__try_stages" | sed 's/-/_/g')

for pkg__current_stage in $pkg__try_stages; do
    if is_function "$pkg__current_stage"; then
        # this command should remain unchecked for errexit to be able to
        # interrupt the function as expected
        eval "$pkg__current_stage" $pkg_args; pkg__err=$?
        # an error status always causes an exit regardless of errexit
        [ $pkg__err = 0 ] || exit $pkg__err
        break
    fi
done

touch "$pkg__stamp_file"
