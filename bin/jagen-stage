#!/bin/sh

if [ "$1" = '-i' ]; then
    pkg__interactive=1; shift
fi

pkg_name="${1:?}"
pkg_stage="${2:?}"
pkg_config="$3"
shift 3
pkg_args="$@"

. "${jagen_dir:?}/src/stages.sh" || exit

pkg__stamp_name="${pkg_name}:${pkg_stage}${pkg_config:+:${pkg_config}}"
pkg__stamp_file="${jagen_build_dir:?}/${pkg__stamp_name}"
pkg__log_file="${jagen_log_dir:?}/${pkg__stamp_name}.log"

exec 3>&1
: >"$pkg__log_file"

_on_exit() {
    # The tee is not running at this point and writing to pipe causes silent
    # failure after a few attempts and the current shell will just exit without
    # finishing the cleanup. We need to redirect the rest of the cleanup output
    # back to a log file to avoid this.
    if [ "$pkg__pipe" ]; then
        exec >>"$pkg__log_file" 2>&1
        pkg__rm "$pkg__pipe"
    fi

    pkg__download_cleanup

    if [ -z "$jagen__stage_quiet" -a -z "$jagen__stage_verbose" ]; then
        if [ "$pkg__run_last_error" != 0 ] && ! in_list "$pkg__log_file" $jagen__cmd_logs; then
            # In the case when the output is buffered by ninja and the command
            # was interrupted the output will be discarded and cat will not
            # print anything. This is actually what we want in this case.
            cat "$pkg__log_file" 1>&3
        fi
    fi
    [ $pkg__run_last_error = 0 ] || exit $pkg__run_last_error
}

# Do not allow to interrupt the stage. Commands running through pkg_run will
# still receive SIGINT and expected to exit with non zero status (usually 130)
# which pkg_run will recognise and call exit by itself.
trap : INT
trap _on_exit EXIT

if [ -z "${pkg__interactive-}" ]; then
    if [ "$jagen__stage_verbose" ]; then
        pkg__pipe=$(mktemp -u /tmp/jagen.XXXXXXXX)
        mkfifo "$pkg__pipe" || exit 1
        # no need to save a pid and kill tee manually because it finishes when
        # the current shell closes the pipe on exit
        tee <"$pkg__pipe" -a "$pkg__log_file" &
        exec >"$pkg__pipe" 2>&1
    else
        exec >>"$pkg__log_file" 2>&1
    fi
fi

cd "$jagen_build_dir" || exit

pkg_work_dir="${jagen_build_dir:?}/$pkg_name"

# override global env and set initial values for pkg env
if [ "$pkg_config" ]; then
    import "config/$pkg_config"
fi

# include scripts
include "$jagen_include_dir/$(pkg__fname "$pkg_name")" || exit
if [ "$pkg_config" ]; then
    include "$jagen_include_dir/$(pkg__fname "$pkg_name" "$pkg_config")" || exit
    # assign "pkg__<config>__export_*" to "pkg_export_*"
    prefix="pkg__${pkg_config}__export"
    for key in $(set | jagen_esed -n "s/^${prefix}_([[:alnum:]_]+)=.*/\1/p"); do
        eval "pkg_export_${key}=\$${prefix}_${key}" || exit
    done; unset prefix key
    # append config-specific uses
    pkg_uses="$pkg_uses $(eval echo \${pkg__${pkg_config}__uses})"
fi

# filter out the toolchain from pkg_uses
new_uses=
for spec in $pkg_uses; do
    if [ "$spec" != "$pkg_build_toolchain" ]; then
        new_uses="$new_uses $spec"
    fi
done; unset spec
pkg_uses=${new_uses# }; unset new_uses

if [ "$pkg_stage" != clean ]; then
    # include uses
    for spec in $pkg_uses; do
        include "$(pkg__export_fname "$spec")" || exit
        if [ "$pkg_config" ]; then
            include "$(pkg__export_fname "$spec" "$pkg_config")" || exit
        fi
        # assign "<name>_env_*" to "pkg_env_*" if unset
        name=$(jagen_name_to_id "${spec%:*}")
        for key in $(set | jagen_esed -n "s/^${name}_env_([[:alnum:]_]+)=.*/\1/p"); do
            eval ": \${pkg_env_${key}=\$${name}_env_${key}}" || exit
        done; unset name key
    done; unset spec
fi

pkg__assign_alias() {
    local IFS='='; set -- $1; unset IFS
    local key alias_to="$1" alias_from="$2"
    for key in $(set | jagen_esed -n "s/^${alias_from}_([[:alnum:]_]+)=.*/\1/p"); do
        eval "${alias_to}_${key}=\$${alias_from}_${key}" || return
    done
}

pkg_use_alias="$pkg_use_alias $(eval echo "\$pkg__${pkg_config}__use_alias")"
for use_alias in $pkg_use_alias; do
    pkg__assign_alias "$use_alias" || exit
done; unset use_alias

if [ "$pkg_stage" != clean ] && [ "$pkg_build_toolchain" ]; then
    include "$(pkg__export_fname "$pkg_build_toolchain")" || exit
    if [ "$pkg_config" ]; then
        include "$(pkg__export_fname "$pkg_build_toolchain" "$pkg_config")" || exit
    fi
    name="$(jagen_name_to_id "${pkg_build_toolchain%:*}")"
    # assign "<toolchain name>_*" to "toolchain_*"
    for key in $(set | jagen_esed -n "s/^${name}_([[:alnum:]_]+)=.*/\1/p"); do
        eval "toolchain_${key}=\$${name}_${key}" || exit
    done; unset name key
    # assign "toolchain_env_*" to "pkg_env_*" if unset
    for key in $(set | jagen_esed -n "s/^toolchain_env_([[:alnum:]_]+)=.*/\1/p"); do
        eval ": \${pkg_env_${key}=\$toolchain_env_${key}}" || exit
    done; unset prefix key
    # assign "toolchain_*" except dirs and flags to "pkg_build_*" if unset
    for key in $(set | jagen_esed -n '/^toolchain_(dir|source_dir|env|cflags|cxxflags|ldflags)/! s/^toolchain_([[:alnum:]_]+)=.*/\1/p'); do
        eval ": \${pkg_build_${key}=\$toolchain_${key}}" || exit
    done; unset key
    use_env cflags
fi

if [ "${pkg_build_system}" ]; then
    pkg_toolchain_prefix=${pkg_build_system}-
fi

# useful pkg-specific variables for scripts
pkg_install_dir="$pkg_install_root$pkg_install_prefix"

# defaults
: ${pkg_build_cmake_executable=${jagen_cmake_executable:-cmake}}
: ${pkg_build_generator=${jagen_cmake_generator:-Ninja}}
: ${pkg_build_cmake_module_path=$jagen_cmake_module_path}

# set pkg_env_* in the environment, collecting names for later expand
for name in $(set | jagen_esed -n 's/^pkg_env_([[:alnum:]_]+)=.*/\1/p'); do
    eval "export $name=\"\$pkg_env_$name\"" || exit
    pkg__expand_names="${pkg__expand_names} -e $name"
done; unset name

# expand single-quoted pkg_* and collected variables
eval "$(jagen__expand "$(set | grep -e '^pkg_' $pkg__expand_names)")"

unset pkg__expand_names

# config-specific adjustment of pkg env
if [ "$pkg_config" ]; then
    use_env "$pkg_config"
fi

# crutches
if [ "$pkg_build_toolchain" ]; then
    if [ "$pkg_build_set_toolchain" ]; then
        use_env set_toolchain
    fi
    if [ "$pkg_build_unset_cflags" ]; then
        use_env unset_cflags
    fi
fi

# remove excessive whitespace from command lines, helps diffing build logs
jagen__trim CFLAGS CXXFLAGS LDFLAGS

pkg__file=$(find_in_path "pkg/${pkg_name}.sh")
if [ -z "$pkg__file" ]; then
    pkg__file=$(find_in_path "pkg/${pkg_name%~*}.sh")
fi
if [ "$pkg__file" ]; then
    include "$pkg__file" || exit
fi; unset pkg__file

case $pkg_stage in
    clean|unpack|update)
        cd "$jagen_build_dir"
        ;;
    patch)
        if [ "$pkg_source_dir" ] && [ -d "$pkg_source_dir" ]; then
            pkg_run cd "$pkg_source_dir"
        fi
        ;;
    *)
        if [ "$pkg_build_dir" ]; then
            pkg_run mkdir -p "$pkg_build_dir"
            pkg_run cd "$pkg_build_dir"
        fi
        in_flags ccache && use_env ccache
        ;;
esac

run_stage() {
    local stage pkg
    stage=$(echo "$1" | sed 's/-/_/')
    pkg="$pkg_name${pkg_config:+ ($pkg_config)}"

    if is_function "$stage"; then
        eval "$stage" $pkg_args || exit
    else
        return 2
    fi
}

run_stage "jagen_pkg_${pkg_stage}_${pkg_config}" ||
run_stage "jagen_stage_${pkg_stage}_${pkg_config}" ||
run_stage "jagen_pkg_${pkg_stage}" ||
run_stage "jagen_stage_${pkg_stage}"

touch "$pkg__stamp_file"
